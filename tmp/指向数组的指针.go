package main

import "fmt"

type grid [9][9]int

func main() {
	var p *[8]int
	p = &[8]int{1, 2, 3, 4, 5, 6, 7, 8}
	fmt.Println(*p)
	var g grid
	var gp *grid
	g[0] = [9]int{0, 1, 2, 3, 4, 5, 6, 7, 8}
	gp = &g
	// g[1][2] = 1
	// 这样写会空指针引用，因为这个元素并不存在，你也只是声明了这个数组但是并没有初始化
	// 注意，数组不能用make函数来声明
	fmt.Println(g)
	fmt.Println(gp)
	// &[[0 1 2 3 4 5 6 7 8] [0 0 0 0 0 0 0 0 0] [0 0 0 0 0 0 0 0 0] [0 0 0 0 0 0 0 0 0] [0 0 0 0 0 0 0 0 0] [0 0 0 0 0 0 0 0 0] [0 0 0 0 0 0 0 0 0] [0 0 0 0 0 0 0 0 0] [0 0 0 0 0 0 0 0 0]]
	// 说明这是一个指针类型
	fmt.Println(*gp)
	// [[0 1 2 3 4 5 6 7 8] [0 0 0 0 0 0 0 0 0] [0 0 0 0 0 0 0 0 0] [0 0 0 0 0 0 0 0 0] [0 0 0 0 0 0 0 0 0] [0 0 0 0 0 0 0 0 0] [0 0 0 0 0 0 0 0 0] [0 0 0 0 0 0 0 0 0] [0 0 0 0 0 0 0 0 0]]
	// 解引用之后得到了一个非指针类型的grid数据
	fmt.Println(gp[1])
	// [0 0 0 0 0 0 0 0 0]
	// 由于gp是一个指针类型，正常来说应该写成(*gp)[1]，但是因为go语言为数组和结构体都提供了自动解引用的特性
	// 所以这里等价于(*gp)[1]
	fmt.Println((*gp)[1])
	// [0 0 0 0 0 0 0 0 0]
	fmt.Println((*gp)[0])
}
